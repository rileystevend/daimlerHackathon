#metadata: information about the flow
#  platformVersion: the version of the bots platform that this flow was written to work with 
metadata:
  platformVersion: "1.0"
main: true
name: DaimlerBot
#context: Define the variables which will used throughout the dialog flow here.
context:
  variables:
    iResult: "nlpresult"
    stepNumber: "int"
    noteReported: "string"
    finalReport: "string"
    repairs: "string"
    report: "string"
    
#The syntax for defining the variables is variablename: "variableType".
# The "variableType" can be defined as a primitive type ("string", "boolean", "int", "float", "double"), "list", "map", "resourcebundle", or an entity name. A variable can also hold the results returned by the Intent Engine. For these variables, the "variableType" must be "nlpresult" (for example, iResult: "nlpresult").

#states is where you can define the various states within your flow.
# The syntax for defining a state is
# statename:
#   component:Specify the component you want to use. This can be either a Built-In or custom component.
#   properties:
#     property1: "value" (These are the properties to the specified component
#   transitions: You can specify one of the following four
#     next: Specify the state you want to execute next after this state. By default it will execute the state specified after this
#     error: Specify the state you want to execute in case the component encounters any error in execution.
#     actions: You can handle various actions returned by the components here the syntax is actionName: "statename"
#        action1: state1
#     return: "done" You can exit the flow using the return statement

states:
  intent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      optionsPrompt: "Do you want to"       
      autoNumberPostbackActions:
      daIntercept: "always" 
    transitions:
      actions:
        StartMaintenanceProcedures: "startMaintenanceProcedures"
        AddToReport: "addToReport"
        CompleteWork: "completeWork"
        unresolvedIntent: "startUnresolved"
        
  startMaintenanceProcedures:
    component: "System.Text"
    properties:
      prompt: "Sounds good, let's get started. What type of work are you trying to accomplish?"
      variable: "repairs"
      nlpResultVariable: "iResult"
      maxPrompts: 3
    transitions:
      actions:
        cancel: "maxError"
        next: "stepOne"
      # insert Component: Control/ConditionEquals. If it equals the step number, jump there

  stepOne:
    component: "System.Output"
    properties:
      text: "${repairs.value} Removing the Front Engine Bracket. Step One. Shut off the engine, chock the wheels, and perform all safety steps."
      keepTurn: false
  #    next: "stepTwo"
      
  stepTwo:
    component: "System.Output"
    properties:
      text: "Step Two. Open the hood and disconnect the batteries."
      keepTurn: false
     # next: "stepTwo" 
 
 
  addToReport:
    component: "System.Text"
    properties:
      prompt: "What's the issue?"
      variable: "report"
      nlpResultVariable: "iResult"
      maxPrompts: 1
    transitions:
      actions:
        cancel: "maxError"
        next: "confirmReport"
    
  confirmReport:
    component: "System.Output"
    properties:
      text: "Added to report."
   
     
     
  completeWork:
    component: "System.Output"
    properties:
      text: "${report.value}"
    transitions: 
      actions:
        cancel: "maxError"
        next: "signOff" 
  
  signOff:
    component: "System.Output"
    properties:
      text: "Nice work, tech"
    transitions: 
      return : "done"     
        
  startUnresolved:
    component: "System.Output"
    properties:
      text: "I am sorry I could not understand, lets connect you with someone to help."
      keepTurn: false
    transitions:
      return: "done" 
      
  maxError:
    component: "System.Output"
    properties:
      text: "OK lets connect you with someone to help"
    transitions:
      return: "done"    
      

    # insert Component: List - Set Variable here to scroll through Repair types.
  